package com.tigergraph.jdbc;

import com.tigergraph.jdbc.utils.ExceptionBuilder;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;

public abstract class Statement implements java.sql.Statement {

  protected Connection connection;
  protected ResultSet  currentResultSet;
  protected int        currentUpdateCount;

  /**
   * Default constructor with JDBC connection.
   *
   * @param connection The JDBC connection
   */
  protected Statement(Connection connection) {
    this.connection = connection;
    this.currentResultSet = null;
    this.currentUpdateCount = -1;
  }

  /**
   * Check if this statement is closed or not.
   * @throws SQLException sqlexception
   */
  protected void checkClosed() throws SQLException {
    if (this.isClosed()) {
      throw new SQLException("Statement already closed");
    }
  }

  /*------------------------------------*/
  /*       Default implementation       */
  /*------------------------------------*/

  @Override public Connection getConnection() throws SQLException {
    this.checkClosed();
    return this.connection;
  }

  @Override public int getUpdateCount() throws SQLException {
    this.checkClosed();
    int update = this.currentUpdateCount;

    if (this.currentResultSet != null) {
      update = -1;
    } else {
      this.currentUpdateCount = -1;
    }
    return update;
  }

  @Override public ResultSet getResultSet() throws SQLException {
    this.checkClosed();
    ResultSet rs = this.currentResultSet;
    this.currentResultSet = null;
    return rs;
  }

  @Override public boolean isClosed() throws SQLException {
    return !(connection != null && !connection.isClosed());
  }

  @Override public void close() throws SQLException {
    if (!this.isClosed()) {
      if (this.currentResultSet != null && !this.currentResultSet.isClosed()) {
        this.currentResultSet.close();
      }
      this.currentUpdateCount = -1;
      this.connection = null;
    }
  }

  /*-----------------------------*/
  /*       Abstract method       */
  /*-----------------------------*/

  @Override public abstract boolean execute(String sql) throws SQLException;

  @Override public abstract ResultSet executeQuery(String sql) throws SQLException;

  @Override public abstract int executeUpdate(String sql) throws SQLException;

  @Override public abstract int getResultSetHoldability() throws SQLException;

  @Override public abstract int getResultSetConcurrency() throws SQLException;

  @Override public abstract int getResultSetType() throws SQLException;

  /*---------------------------------*/
  /*       Not implemented yet       */
  /*---------------------------------*/

  @Override public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean execute(String sql, String[] columnNames) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getMaxFieldSize() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setMaxFieldSize(int max) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setEscapeProcessing(boolean enable) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setCursorName(String name) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setFetchDirection(int direction) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getFetchDirection() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getFetchSize() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean getMoreResults(int current) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public ResultSet getGeneratedKeys() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void cancel() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setPoolable(boolean poolable) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean isPoolable() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void addBatch(String sql) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void clearBatch() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int[] executeBatch() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void closeOnCompletion() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean isCloseOnCompletion() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public <T> T unwrap(Class<T> iface) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getMaxRows() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setMaxRows(int max) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getQueryTimeout() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setQueryTimeout(int seconds) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setFetchSize(int rows) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean getMoreResults() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public SQLWarning getWarnings() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void clearWarnings() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

}

