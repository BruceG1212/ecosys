package com.tigergraph.jdbc;

import com.tigergraph.jdbc.utils.ExceptionBuilder;

import java.sql.*;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public abstract class Connection implements java.sql.Connection {

  /**
   * JDBC Url used for this connection
   */
  private String url;

  /**
   * JDBC driver properties
   */
  private Properties properties;

  /**
   * Is the connection is in readonly mode ?
   */
  private boolean readOnly = false;

  /**
   * Holdability of the connection
   */
  private int holdability;

  /**
   * Default constructor with properties.
   *
   * @param properties driver properties
   * @param url connection url
   * @param defaultHoldability connection holdability
   */
  protected Connection(Properties properties, String url, int defaultHoldability) {
    this.url = url;
    this.properties = properties;
    this.holdability = defaultHoldability;
  }

  public static boolean hasDebug(Properties properties) {
    return "true".equalsIgnoreCase(properties.getProperty("debug", "false"));
  }

  /**
   * Get the connection url.
   * 
   * @return String the connection url
   */
  public String getUrl() {
    return url;
  }
  
  /**
   * Get the properties for this connection.
   * 
   * @return Properties the properties for this connection
   */
  public Properties getProperties() {
    return properties;
  }
  
  /**
   * Get user name of this connection.
   *
   * @return String
   */
  public String getUserName() {
    return properties.getProperty("user");
  }

  /**
   * Get the flattening sample rows (-1 if no flattening).
   *
   * @return int
   */
  public int getFlattening() {
    String flatten = properties.getProperty("flatten");
    return flatten == null ? 0 : Integer.parseInt(flatten);
  }

  /*---------------------------------------*/
  /*       Some useful check method        */
  /*---------------------------------------*/

  /**
   * Check if this connection is closed or not.
   * If it's closed, then we throw a SQLException, otherwise we do nothing.
   * @throws SQLException sqlexception
   */
  protected void checkClosed() throws SQLException {
    if (this.isClosed()) {
      throw new SQLException("Connection already closed");
    }
  }

  /*------------------------------------*/
  /*       Default implementation       */
  /*------------------------------------*/

  @Override public void setReadOnly(boolean readOnly) throws SQLException {
    this.checkClosed();
    this.readOnly = readOnly;
  }

  @Override public boolean isReadOnly() throws SQLException {
    this.checkClosed();
    return this.readOnly;
  }

  @Override public void setHoldability(int holdability) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getHoldability() throws SQLException {
    this.checkClosed();
    return this.holdability;
  }

  /**
   * Default implementation of setCatalog.
   */
  @Override public void setCatalog(String catalog) throws SQLException {
    this.checkClosed();
    return;
  }

  /**
   * Default implementation of getCatalog.
   */
  @Override public String getCatalog() throws SQLException {
    this.checkClosed();
    return null;
  }

  /**
   * Default implementation of getTransactionIsolation.
   */
  @Override public int getTransactionIsolation() throws SQLException {
    this.checkClosed();
    return TRANSACTION_READ_COMMITTED;
  }

  /**
   * Default implementation of setTransactionIsolation.
   */
  @Override public void setTransactionIsolation(int level) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  /**
   * Default implementation of preparedStatement(String, int).
   * We're just ignoring the autoGeneratedKeys param.
   */
  @Override public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  /**
   * Default implementation of nativeSQL.
   * Here we should implement some hacks for JDBC tools if needed.
   * This method must be used before running a query.
   */
  @Override public String nativeSQL(String sql) throws SQLException {
    return sql;
  }

  @Override public <T> T unwrap(Class<T> iface) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public SQLWarning getWarnings() throws SQLException {
    checkClosed();
    return null;
  }

  @Override public void clearWarnings() throws SQLException {
    checkClosed();
  }

  @Override public String getSchema() throws SQLException {
    checkClosed();
    return null;
  }

  /*-----------------------------*/
  /*       Abstract method       */
  /*-----------------------------*/

  @Override public abstract DatabaseMetaData getMetaData() throws SQLException;

  @Override public abstract void setAutoCommit(boolean autoCommit) throws SQLException;

  @Override public abstract boolean getAutoCommit() throws SQLException;

  @Override abstract public void commit() throws SQLException;

  @Override abstract public void rollback() throws SQLException;

  @Override public abstract Statement createStatement() throws SQLException;

  @Override public abstract Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException;

  @Override public abstract Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;

  @Override public abstract PreparedStatement prepareStatement(String sql) throws SQLException;

  @Override public abstract PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;

  @Override public abstract PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
      throws SQLException;

  @Override public abstract void close() throws SQLException;

  @Override public abstract boolean isClosed() throws SQLException;

  @Override public abstract boolean isValid(int timeout) throws SQLException;

  /*---------------------------------*/
  /*       Not implemented yet       */
  /*---------------------------------*/

  @Override public java.sql.CallableStatement prepareCall(String sql) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Map<String, Class<?>> getTypeMap() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Savepoint setSavepoint() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Savepoint setSavepoint(String name) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void rollback(Savepoint savepoint) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Clob createClob() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Blob createBlob() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public NClob createNClob() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public SQLXML createSQLXML() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setClientInfo(String name, String value) throws SQLClientInfoException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setClientInfo(Properties properties) throws SQLClientInfoException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public String getClientInfo(String name) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Properties getClientInfo() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setSchema(String schema) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void abort(Executor executor) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

  @Override public int getNetworkTimeout() throws SQLException {
    throw ExceptionBuilder.buildUnsupportedOperationException();
  }

}

