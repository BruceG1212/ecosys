use graph ldbc_snb

create query ic_12(vertex<person> pid, string className) for graph ldbc_snb {
  // global accumulator
  SetAccum<vertex<person>> @@friends;

  // vertex-attached accumulators
  SetAccum<vertex<comments>> @replySet;
  SetAccum<string> @tagNames;
  SumAccum<int> @replyCount;

  PersonSeed = { pid };
  TagclassSeed = { tagclass.* };

  // find all of the given user's friends
  Result =
    select tgt
    from PersonSeed:src -((person_knows_person>|<person_knows_person))- person:tgt
    accum @@friends += tgt
    ;

  // collect all the accepted tags constrained by the tagclass condition
  TagSet =
    select tgt
    from TagclassSeed:src -((<tagclass_isSubclassOf_tagclass)*)- tagclass
         -(<tag_hasType_tagclass)- tag:tgt
    where src.name == className
    ;

  // use TagSet to refine Result
  Result =
    select tgt
    from TagSet:src -(<post_hasTag_tag.<comments_replyOf_post)- comments:msg
         -(comments_hasCreator_person>)- person:tgt
    where tgt in @@friends
    accum tgt.@tagNames += src.name, tgt.@replySet += msg
    post-accum tgt.@replyCount += tgt.@replySet.size()
    having tgt.@replyCount >= 1
    order by tgt.@replyCount desc, tgt.id asc
    limit 20
    ;

  print Result[
    Result.id as personId,
    Result.firstName as personFirstName,
    Result.lastName as personLastName,
    Result.@tagNames as tagNames,
    Result.@replyCount as replyCount
  ];
}

