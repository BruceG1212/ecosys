use graph ldbc_snb

create query bi_24(string className) for graph ldbc_snb {
  // user-defined tuples
  typedef tuple<int messageCount, int likeCount, int year,
                int month, string continentName> res;

  // global accumulator(s)
  GroupByAccum<string continentName, int year, int month,
               SetAccum<vertex> messages> @@groups;
  HeapAccum<res>(100, year asc, month asc, continentName desc) @@results;
  SumAccum<int> @@likeCountByGroup;

  // vertex-attached accumulator(s)
  SumAccum<string> @continentName;
  SumAccum<int> @likeCount;

  TagClassSeed = { tagclass.* };
  // find the set of all messages created under the given tagclass
  MessageSet =
    select tgt
    from TagClassSeed:src -(<tag_hasType_tagclass)- _
         -((<post_hasTag_tag|comments_hasTag_tag))- (post|comments):tgt
    where src.name == className
    ;

  // aggregate continent name onto MessageSet
  AggregateSet =
    select src
    from MessageSet:src -((post_isLocatedIn_country>|comments_isLocatedIn_country>))- _
         -(country_isPartOf_continent)- continent:tgt
    accum src.@continentName += tgt.name
    ;
  // aggregate @likeCount for each message
  AggregateSet =
    select src
    from MessageSet:src -((<person_likes_post|<person_likes_comments))- person:tgt
    accum src.@likeCount += 1
    ;

  MessageSet =
    select src
    from MessageSet:src
    accum
      int creationYear = year(src.creationDate),
      int creationMonth = month(src.creationDate),
      @@groups += (src.@continentName, creationYear, creationMonth -> src)
    ;

  foreach g in @@groups do
    @@likeCountByGroup = 0;
    foreach msg in g.messages do
      @@likeCountByGroup += msg.@likeCount;
    end;
    @@results += res(g.messages.size(), @@likeCountByGroup,
                     g.year, g.month, g.continentName);
  end;

  print @@results;
}

