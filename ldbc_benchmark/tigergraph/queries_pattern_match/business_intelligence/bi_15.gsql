use graph ldbc_snb

create query bi_15(string countryName) for graph ldbc_snb {
  // global accumulator(s)
  SumAccum<int> @@socialNormal;

  // vertex-attached accumulator(s)
  SumAccum<int> @personCount;
  SumAccum<int> @totalFriendCount;

  // find the country with the given name
  CountrySeed = { country.* };

  // find all users within the given country
  PersonSet =
    select tgt
    from CountrySeed:src -(<city_isPartOf_country.<person_isLocatedIn_city)- person:tgt
    where src.name == countryName
    accum src.@personCount += 1
    ;

  // aggregate info about the country's "social normal"
  AggregateSet =
    select src
    from CountrySeed:src -(<city_isPartOf_country.<person_isLocatedIn_city)- person:mid
         -((person_knows_person>|<person_knows_person))- person:tgt
    where src.name == countryName and tgt in PersonSet
    accum src.@totalFriendCount += 1
    post-accum @@socialNormal += floor(src.@totalFriendCount / src.@personCount)
    ;

  // find all users whose totalFriendCount equals socialNormal
  ResultSet =
    select src
    from PersonSet:src -((<person_knows_person|person_knows_person>))- person:tgt
    where tgt in PersonSet
    accum src.@totalFriendCount += 1
    having src.@totalFriendCount == @@socialNormal
    order by src.id asc
    ;

  print ResultSet[
    ResultSet.id as personId,
    ResultSet.@totalFriendCount as totalFriendCount
  ];
}

