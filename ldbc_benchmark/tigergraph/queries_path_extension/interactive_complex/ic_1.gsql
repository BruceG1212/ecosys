USE GRAPH ldbc_snb
DROP QUERY ic_1 

CREATE QUERY ic_1(vertex<person> personId, string firstName) FOR GRAPH ldbc_snb {
  TYPEDEF TUPLE<string orgName, int orgYear, string orgPlace> org;

  OrAccum @visited = False;
  SumAccum<int> @distance;
  ListAccum<vertex<person>> @@friends;
  SumAccum<string> @cityName;
  ListAccum<org> @comp;
  ListAccum<org> @univ;

  int i = 0;
	
  vPerson = { personId };
	
  WHILE i < 3 DO
    vPerson = 
      SELECT t
      FROM vPerson:s-(person_knows_person>:e)-person:t
      WHERE t.@visited == False
      ACCUM 
        s.@visited += True,
        t.@visited += True,
        t.@distance += (i+1)
      POST-ACCUM CASE WHEN t.firstName == firstName THEN @@friends += t END;

    i = i + 1;
  END;

  vFriends = { @@friends };
	
  vFriends = 
    SELECT v
    FROM vFriends:v
    ORDER BY v.@distance ASC, v.lastName ASC, v.id ASC
    LIMIT 20;

  vFriends = 
    SELECT s
    FROM vFriends:s-(person_isLocatedIn_city>:e)-city:t
    ACCUM s.@cityName = t.name;
	
  vFriends = 
    SELECT s
    FROM vFriends:s-(person_workAt_company>:e1)-company:im-(company_isLocatedIn_country>:e2)-country:t
    ACCUM s.@comp += org(im.name, e1.workFrom, t.name);

  vFriends = 
    SELECT s
    FROM vFriends:s-(person_workAt_company>:e1)-company:im-(company_isLocatedIn_country>:e2)-country:t
    ACCUM s.@univ += org(im.name, e1.classYear, t.name)
    ORDER BY s.@distance ASC, s.lastName ASC, s.id ASC;
	
  PRINT vFriends[
    vFriends.id AS friendId,
    vFriends.lastName AS friendLastName,
    vFriends.@distance AS distanceFromPerson,
    vFriends.birthday AS friendBirthday,
    vFriends.creationDate AS friendCreationDate,
    vFriends.gender AS friendGender,
    vFriends.browserUsed AS friendBrowserUsed,
    vFriends.locationIP AS friendLocationIp,
    vFriends.email AS friendEmails,
    vFriends.speaks AS friendLanguages,
    vFriends.@cityName AS friendCityName,
    vFriends.@univ AS friendUniversities,
    vFriends.@comp AS friendCompanies];
}

INSTALL QUERY ic_1
