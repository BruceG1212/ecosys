//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 16 query description is on page 74 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi16

CREATE QUERY bi16(VERTEX<Person> personId, STRING countryName, STRING tagClassName, INT minPathDistance, INT maxPathDistance) FOR GRAPH ldbc_snb {
  TYPEDEF tuple<INT personId, STRING tagName, INT messageCount> social;
  SumAccum<INT> @@counter = 1;
  OrAccum @valid;
  SetAccum<INT> @visited;
  SetAccum<VERTEX<Person>> @@personRange;
  SumAccum<INT> @creatorId;
  SetAccum<STRING> @tagNames;
  SetAccum<VERTEX<Tag>> @@tagSel;
  GroupByAccum<INT person_id, STRING tag_name, SumAccum<INT> messageCount> @@socialGroup;
  HeapAccum<social>(100, messageCount DESC, tag_name ASC, person_id ASC) @@socialTop;
  
  P = 
    SELECT p
    FROM Country:s-(<IS_PART_OF.<IS_LOCATED_IN)-Person:p
    WHERE s.name == countryName
    ACCUM p.@valid = true;

  S = { personId };
  WHILE @@counter <= maxPathDistance DO
    S =
      SELECT t
      FROM S:s-(KNOWS)-P:t
      WHERE t.@valid == true AND (NOT s.id IN t.@visited)
      ACCUM 
        t.@visited += s.id,
        s.@visited += t.id,
        CASE WHEN @@counter >= minPathDistance THEN
          @@personRange += t
        END;
    @@counter += 1;
  END;

  vPerson = { @@personRange };
  vMessage =
    SELECT t
    FROM vPerson:s-(<HAS_CREATOR)-(Comment|Post):t
    ACCUM t.@creatorId = s.id;

  vTag =
    SELECT t
    FROM TagClass:s-(<HAS_TYPE)-Tag:t -(<HAS_TAG)- vMessage:m
    WHERE s.name == tagClassName
    PER(t,m)
    ACCUM 
      m.@tagNames += t.name
    POST-ACCUM
      CASE WHEN s.@tagNames.size()>0 THEN
        FOREACH tn IN s.@tagNames DO
          @@socialGroup += (s.@creatorId, tn -> 1)
        END
      END;
      
  FOREACH (p,t,m) IN @@socialGroup DO
    @@socialTop += social(p, t, m);
  END;

  PRINT @@socialTop;
}