//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 7 query description is on page 65 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi7
CREATE DISTRIBUTED QUERY bi7(string tagName) FOR GRAPH ldbc_snb {
  SumAccum<INT> @authorityScore,@popularityScore, @CreatorId;
  OrAccum @valid;
  SetAccum<VERTEX<Person>> @likedby;
  MapAccum<VERTEX<Person>, SumAccum<INT>> @@personPopScore;

  vTag = SELECT t FROM Tag:t WHERE t.name == tagName;  
  M1 =
    SELECT m
    FROM vTag -(<HAS_TAG)- (Post|Comment):m;

  P1 = 
    SELECT p
    FROM M1:m -(HAS_CREATOR>)- Person:p;

  P2 =
    SELECT p
    FROM M1:m -(<LIKES)- Person:p
    ACCUM m.@likedby += p;

  M3 =
    SELECT m3
    FROM P2:p2 -(<HAS_CREATOR)- Comment:m3;

  P3 =
    SELECT p3
    FROM M3:m3-(<LIKES)-Person:p3
    ACCUM m3.@popularityScore += 1;

  P2 =
    SELECT p2
    FROM M3:m3-(HAS_CREATOR>)-Person:p2
    ACCUM @@personPopScore += (p2->m3.@popularityScore);

  P = 
    SELECT p
    FROM P1:p -(<HAS_CREATOR)-Comment:m
    ACCUM p.@likedby += m.@likedby
    POST-ACCUM FOREACH p2 in p.@likedby DO
        p.@authorityScore += @@personPopScore.get(p2)
      END
    ORDER BY p.@authorityScore DESC, p.id ASC
    LIMIT 100;
  
  PRINT P[P.id AS personId, P.@authorityScore AS authorityScore];
}

/* Slower 
CREATE DISTRIBUTED QUERY bi7(string tagName) FOR GRAPH ldbc_snb {
  SumAccum<INT> @authorityScore, @CreatorId;
  MapAccum<VERTEX<Person>, SumAccum<INT>> @@popularityScoreMap;
  MapAccum<INT, SetAccum<VERTEX<Person>>> @@personMap;
  OrAccum @valid;
  SetAccum<VERTEX<Person>> @likedby;

  vTag = SELECT t FROM Tag:t WHERE t.name == tagName;  
  M1 =
    SELECT m
    FROM vTag -(<HAS_TAG)- (Post|Comment):m;

  P1 = 
    SELECT p
    FROM M1:m -(HAS_CREATOR>)- Person:p
    ACCUM m.@CreatorId += p.id;

  P2 =
    SELECT p
    FROM M1:m -(<LIKES)- Person:p
    ACCUM @@personMap += (m.@CreatorId->p);

  P3 =
    SELECT p3
    FROM P2:p2 -(<HAS_CREATOR)- Comment:m3 -(<LIKES)- Person:p3
    PER MATCH
    ACCUM @@popularityScoreMap += (p2 -> 1);

  P =
    SELECT p1
    FROM P1:p1
    ACCUM 
      FOREACH p2 in @@personMap.get(p1.id) DO
        p1.@authorityScore += @@popularityScoreMap.get(p2)
      END 
    ORDER BY p1.@authorityScore DESC, p1.id ASC
    LIMIT 100;

  PRINT P[P.id AS personId, P.@authorityScore AS authorityScore];
}
*/
//INSTALL QUERY bi7
//RUN QUERY bi7("Arnold_Schwarzenegger")
