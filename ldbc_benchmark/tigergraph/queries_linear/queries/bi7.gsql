//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 7 query description is on page 65 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi7

CREATE DISTRIBUTED QUERY bi7(string tagName) FOR GRAPH ldbc_snb {
  SumAccum<INT> @authorityScore;
  MapAccum<VERTEX<Person>, SumAccum<INT>> @@popularityScoreMap;
  OrAccum @valid;
  SetAccum<VERTEX<Person>> @likedby;

  M1 =
    SELECT m
    FROM Tag:t -(<HAS_TAG)- (Post|Comment):m 
    WHERE t.name == tagName
    ACCUM m.@valid += True;

  P1 = 
    SELECT p
    FROM  M1:m -(HAS_CREATOR>)- Person:p;

  P2 =
    SELECT p2
    FROM P1:p1 -(<HAS_CREATOR)- :m2 -(<LIKES)- :p2
    WHERE m2.@valid
    PER(p1,p2)
    ACCUM p1.@likedby += p2;

  P3 =
    SELECT p3
    FROM P2:p2 -(<HAS_CREATOR)- :m3 -(<LIKES)- :p3
    PER(p2,p3)
    ACCUM @@popularityScoreMap += (p2 -> 1);

  P =
    SELECT p1
    FROM P1:p1
    ACCUM 
      FOREACH p2 in p1.@likedby DO
        p1.@authorityScore += @@popularityScoreMap.get(p2)
      END 
    ORDER BY p1.@authorityScore DESC, p1.id ASC
    LIMIT 100;

  PRINT P[P.id AS personId, P.@authorityScore AS authorityScore];
}

//INSTALL QUERY bi7
//RUN QUERY bi7("Arnold_Schwarzenegger")
