USE GRAPH ldbc_snb
DROP QUERY ic_13

CREATE QUERY ic_13(vertex<person> person1Id, vertex<person> person2Id) FOR GRAPH ldbc_snb {
  SumAccum<int> @dist1 = -1, @dist2 = -1, @@next;
	MinAccum<int> @@dist12;
	bool found = False;
	
	IF person1Id != person2Id THEN
    vPerson = { person1Id, person2Id };
    
    vPerson = SELECT v
              FROM vPerson:v
              ACCUM CASE WHEN v == person1Id THEN v.@dist1 = 0
                         WHEN v == person2Id THEN v.@dist2 = 0
                    END;
    
    WHILE NOT found DO
	    @@next = 0;
      vPerson = SELECT t
                FROM vPerson:s-(person_knows_person:e)->person:t
	              WHERE t.@dist1 < 0 OR t.@dist2 < 0 OR t.@dist1 < s.@dist1 OR t.@dist2 < s.@dist2
                ACCUM CASE WHEN s.@dist1 > -1 AND t.@dist2 > -1 THEN
                                @@dist12 += s.@dist1 + t.@dist2 + 1, found = True
                           WHEN s.@dist2 > -1 AND t.@dist1 > -1 THEN
                                @@dist12 += s.@dist2 + t.@dist1 + 1, found = True
                           WHEN s.@dist1 > -1 AND (t.@dist1 < 0 OR t.@dist1 > s.@dist1) THEN
                                t.@dist1 = s.@dist1 + 1, @@next += 1
                           WHEN s.@dist2 > -1 AND (t.@dist2 < 0 OR t.@dist2 > s.@dist2) THEN
                                t.@dist2 = s.@dist2 + 1, @@next += 1
                      END
	              POST-ACCUM CASE WHEN t.@dist1 > -1 AND t.@dist2 > -1 THEN
	                                   @@dist12 += t.@dist1 + t.@dist2, found = True
	                         END;
	                    
	    IF @@next == 0 THEN
	      @@dist12 = -1;
	      BREAK;
	    END;
    END;
  ELSE
    @@dist12 += 0;
  END;
	
	PRINT @@dist12 AS shortestPathLength;
}

INSTALL QUERY ic_13