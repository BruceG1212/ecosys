CREATE QUERY ic_11(VERTEX<Person> personId, STRING countryName, INT workFromYear) FOR GRAPH ldbc_snb {

  ListAccum<VERTEX<Person>> @@friendAll;
  OrAccum @visited;
  OrAccum @locatedInGivenCountry;
	SumAccum<String> @organizationName;
	SumAccum<INT> @worksFrom;
  //HeapAccum<friendInfo>(10, organizationWorkFromYear ASC, personId ASC, organizationName DESC) @@friendInfoTop;

  INT i = 0;

  vPerson = { personId };
	vPerson = SELECT s
	          FROM vPerson:s
	          ACCUM s.@visited = TRUE;
  WHILE i < 2 DO
    vPerson = 
      SELECT t
      FROM vPerson:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)->Person:t
      WHERE t.@visited == False
      ACCUM 
        t.@visited += True,
        @@friendAll += t;

    i = i + 1;
  END;

  vCompany = { Company.* };
  findCompanyInGivenCountry = 
    SELECT t
    FROM vCompany:s-(Company_IS_LOCATED_IN_Country:e)->Country:t
    WHERE t.name == countryName
    ACCUM s.@locatedInGivenCountry += True;

  vFriend = { @@friendAll };
  aggFriend = 
    SELECT s
    FROM vFriend:s-(Person_WORK_AT_Company:e)->Company:t
    WHERE e.workFrom < workFromYear
          AND t.@locatedInGivenCountry == True
    ACCUM s.@organizationName = t.name, 
	        s.@worksFrom = e.workFrom
    ORDER BY s.@worksFrom ASC,
	           s.id ASC,
	           s.@organizationName DESC
	  LIMIT 10;

  PRINT aggFriend[aggFriend.id AS personId,
	      aggFriend.firstName AS personFirstName,
		    aggFriend.lastName AS personLastName,
		    aggFriend.@organizationName AS organizationName,
		    aggFriend.@worksFrom AS organizationWorkFromYear];
}
