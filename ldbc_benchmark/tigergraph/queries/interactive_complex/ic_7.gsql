USE GRAPH ldbc_snb
DROP QUERY ic_7

CREATE QUERY ic_7(vertex<person> personId) FOR GRAPH ldbc_snb {
	SumAccum<int> @likeCreationDate, @commentOrPostId, @minutesLatency;
	SumAccum<string> @commentOrPostContent;
	AndAccum @isNew;
	
  vPerson = { personId };
	
	vMessage = SELECT t
	           FROM vPerson:s-((comments_hasCreator_person_reverse|post_hasCreator_person_reverse):e)->(comments|post):t;
	
	vLiker = SELECT t
	         FROM vMessage:s-((person_likes_comments_reverse|person_likes_post_reverse):e)->person:t
	         ACCUM t.@likeCreationDate = datetime_to_epoch(e.creationDate),
	               t.@commentOrPostId = s.id,
	               CASE WHEN s.type == "comments" THEN t.@commentOrPostContent = s.content 
	                    ELSE t.@commentOrPostContent += s.imageFile 
	               END,
	               t.@minutesLatency = (datetime_diff(s.creationDate, e.creationDate) / 60)
	         ORDER BY t.@likeCreationDate DESC, t.id ASC
	         LIMIT 20;
	          
	vLiker = SELECT s
	         FROM vLiker:s-(person_knows_person:e)->person:t
	         ACCUM CASE WHEN t == personId THEN s.@isNew += False END
	         ORDER BY s.@likeCreationDate DESC, s.id ASC;
	
	PRINT vLiker[vLiker.id AS personId,
		           vLiker.firstName AS personFirstName,
				       vLiker.lastName AS personLastName,
				       epoch_to_datetime(vLiker.@likeCreationDate) AS likeCreationDate,
				       vLiker.@commentOrPostId AS commentOrPostId,
				       vLiker.@commentOrPostContent AS commentOrPostContent,
				       vLiker.@minutesLatency AS minutesLatency,
				       vLiker.@isNew AS isNew];
}

INSTALL QUERY ic_7