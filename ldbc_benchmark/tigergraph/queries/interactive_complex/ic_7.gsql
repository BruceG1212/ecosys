CREATE QUERY ic_7(VERTEX<Person> personId) FOR GRAPH ldbc_snb {
  TYPEDEF TUPLE<INT personId, STRING personFirstName, STRING personLastName, DATETIME likeCreationDate, INT commentOrPostId, STRING commentOrPostContent, INT minutesLatency, BOOL isNew> liker;

  SetAccum<INT> @@friendIds;
  SumAccum<INT> @likeCreationDate, @commentOrPostId, @minutesLatency;
  SumAccum<STRING> @commentOrPostContent;
  AndAccum @isNew;
  HeapAccum<liker>(20, likeCreationDate DESC, personId ASC) @@likerTop;

  vPerson = { personId };
  vMessage = 
    SELECT t
    FROM vPerson:s-((Comment_HAS_CREATOR_Person_REVERSE|Post_HAS_CREATOR_Person_REVERSE):e)->(Comment|Post):t;

  vFriend =
    SELECT t
    FROM vPerson-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)-Person:t
    ACCUM @@friendIds += t.id;

  vLiker = 
    SELECT t
    FROM vMessage:s-((Person_LIKES_Comment_REVERSE|Person_LIKES_Post_REVERSE):e)->Person:t
    ACCUM 
      t.@likeCreationDate = datetime_to_epoch(e.creationDate),
      t.@commentOrPostId = s.id,
      CASE 
        WHEN s.type == "Comment" THEN 
          t.@commentOrPostContent = s.content 
        ELSE 
          t.@commentOrPostContent += s.imageFile 
      END,
      t.@minutesLatency = (datetime_diff(s.creationDate, e.creationDate) / 60),
      CASE WHEN @@friendIds.contains(t.id) THEN t.@isNew += False END
    POST-ACCUM @@likerTop += liker(t.id, t.firstName, t.lastName, epoch_to_datetime(t.@likeCreationDate), t.@commentOrPostId, t.@commentOrPostContent, t.@minutesLatency, t.@isNew);

  PRINT @@likerTop;
}