USE GRAPH ldbc_snb
DROP QUERY ic_9

CREATE QUERY ic_9(vertex<person> personId, int maxDateEpoch) FOR GRAPH ldbc_snb {
	TYPEDEF tuple<int personId, string personFirstName, string personLastName, int messageId, string messageContent, datetime messageCreationDate> msgInfo;
	
  ListAccum<vertex<person>> @@friendAll;
	OrAccum @visited;
	HeapAccum<msgInfo>(20, messageCreationDate DESC, messageId ASC) @@msgInfoTop;

  int i = 0;
  datetime maxDate;
	
	vPerson = { personId };
	
	WHILE i < 2 DO
	  vPerson = SELECT t
	            FROM vPerson:s-(person_knows_person:e)->person:t
	            WHERE t.@visited == False
	            ACCUM s.@visited += True,
	                  t.@visited += True,
	                  @@friendAll += t;
	  i += 1;
	END;
	
	vFriend = { @@friendAll };

  // maxDateEpoch is in millisecond and epoch_to_datetime() won't work properly with 13-digit epoch,
	// so truncate millisecond portion of the given epoch
	maxDate = epoch_to_datetime(maxDateEpoch/1000);

  vMessage = SELECT t
	           FROM vFriend:s-((comments_hasCreator_person_reverse|post_hasCreator_person_reverse):e)->(comments|post):t
             WHERE t.creationDate < maxDate
             ACCUM CASE WHEN t.type == "comments" THEN 
	                           @@msgInfoTop += msgInfo(s.id, s.firstName, s.lastName, t.id, t.content, t.creationDate)
	                      ELSE @@msgInfoTop += msgInfo(s.id, s.firstName, s.lastName, t.id, t.imageFile, t.creationDate)
	                 END;

  PRINT @@msgInfoTop;
}

INSTALL QUERY ic_9