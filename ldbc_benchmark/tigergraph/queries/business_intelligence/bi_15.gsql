USE GRAPH ldbc_snb
DROP QUERY bi_15

CREATE QUERY bi_15(STRING _country) FOR GRAPH ldbc_snb {
  TYPEDEF TUPLE<INT personId, INT count_> socialNormalPerson;

  SetAccum<VERTEX<person>> @@personInCountry;
  SumAccum<INT> @@numFriendsAll;
  SumAccum<INT> @numFriends;
  HeapAccum<socialNormalPerson>(100, personId ASC) @@socialNormalPersonTop;

  INT socialNormal = 0;

  vCountry = { country.* };
  vCity = 
    SELECT t
    FROM vCountry:s-(city_isPartOf_country_reverse:e)->city:t
    WHERE s.name == _country;

  vPerson =
    SELECT t
    FROM vCity:s-(person_isLocatedIn_city_reverse:e)->person:t
    POST-ACCUM @@personInCountry += t;

  // phase 1. calculate social normal, i.e. floor(avg(#friends))
  vFriend =
    SELECT t
    FROM vPerson:s-((person_knows_person|person_knows_person_reverse):e)->person:t
    WHERE @@personInCountry.contains(t)
    ACCUM @@numFriendsAll += 1;

  socialNormal = floor(@@numFriendsAll / @@personInCountry.size());

  // phase 2. find persons in country, whose # friends in country == socialNormal
  vPerson = { @@personInCountry };
  vPerson =
    SELECT s
    FROM vPerson:s-((person_knows_person|person_knows_person_reverse):e)->person:t
    WHERE @@personInCountry.contains(t)
    ACCUM s.@numFriends += 1
    POST-ACCUM 
      CASE 
        WHEN s.@numFriends == socialNormal THEN 
          @@socialNormalPersonTop += socialNormalPerson(s.id, s.@numFriends) 
      END;

  PRINT @@socialNormalPersonTop;
}

INSTALL QUERY bi_15