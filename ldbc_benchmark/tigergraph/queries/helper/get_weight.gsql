USE GRAPH ldbc_snb
DROP QUERY get_weight

CREATE QUERY get_weight(vertex<person> person1, vertex<person> person2) FOR GRAPH ldbc_snb RETURNS(double) { 
	SumAccum<double> @@weight;
	SetAccum<vertex<comments>> @@c1, @@c2;
	SetAccum<vertex<post>> @@p1, @@p2;
	
  vPerson1 = { person1 };
	vPerson2 = { person2 };
	
	vComments1 = 
	  SELECT t
	  FROM vPerson1:s-(comments_hasCreator_person_reverse:e)->comments:t
	  ACCUM @@c1 += t;
	
	vPost1 = 
	  SELECT t
	  FROM vPerson1:s-(post_hasCreator_person_reverse:e)->post:t
	  ACCUM @@p1 += t;
	
	vComments2 = 
	  SELECT t
	  FROM vPerson2:s-(comments_hasCreator_person_reverse:e)->comments:t
	  ACCUM @@c2 += t;
	
	vPost2 = 
	  SELECT t
	  FROM vPerson2:s-(post_hasCreator_person_reverse:e)->post:t
	  ACCUM @@p2 += t;
	
	vComments1 = 
	  SELECT s
	  FROM vComments1:s-(comments_replyOf_post:e)-post:t
	  ACCUM CASE WHEN @@p2.contains(t) THEN @@weight += 1 END;

  vComments1 = 
	  SELECT s
	  FROM vComments1:s-(comments_replyOf_comments:e)-comments:t
	  ACCUM CASE WHEN @@c2.contains(t) THEN @@weight += 0.5 END;
	
	vComments2 = 
	  SELECT s
	  FROM vComments2:s-(comments_replyOf_post:e)-post:t
	  ACCUM CASE WHEN @@p1.contains(t) THEN @@weight += 1 END;

  vComments2 = 
	  SELECT s
	  FROM vComments2:s-(comments_replyOf_comments:e)-comments:t
	  ACCUM CASE WHEN @@c1.contains(t) THEN @@weight += 0.5 END;
	
	RETURN @@weight;
}

INSTALL QUERY get_weight