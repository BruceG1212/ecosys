USE GRAPH ldbc_snb
DROP QUERY is_7

CREATE QUERY is_7(STRING messageId) FOR GRAPH ldbc_snb {
  SetAccum<STRING> @@seed;
  SetAccum<INT> @@friendIds;
  SumAccum<INT> @replierId;
  SumAccum<STRING> @replierFirstName, @replierLastName;
  OrAccum @knows;

  @@seed += messageId;
  vComments = to_vertex_set(@@seed, "comments");

  IF vComments.size() > 0 THEN
    vCreator = 
      SELECT t
      FROM vComments:s-(comments_hasCreator_person:e)->person:t;

    vReply = 
      SELECT t
      FROM vComments:s-(comments_replyOf_comments_reverse:e)->comments:t;
  ELSE
    vPost = to_vertex_set(@@seed, "post");
    vCreator = 
      SELECT t
      FROM vPost:s-(post_hasCreator_person:e)->person:t;

    vReply = 
      SELECT t
      FROM vPost:s-(comments_replyOf_post_reverse:e)->comments:t;
  END;

  vFriend =
    SELECT t
    FROM vCreator:s-((person_knows_person|person_knows_person_reverse):e)->person:t
    POST-ACCUM @@friendIds += t.id;

  vReply =
    SELECT s
    FROM vReply:s-(comments_hasCreator_person:e)->person:t
    ACCUM
      s.@replierId = t.id,
      s.@replierFirstName = t.firstName,
      s.@replierLastName = t.lastName,
      CASE WHEN @@friendIds.contains(t.id) THEN s.@knows += True END
    ORDER BY s.creationDate DESC, s.@replierId ASC;

  PRINT vReply[
      vReply.id AS commentId,
      vReply.content AS commentContent,
      vReply.creationDate AS commentCreationDate,
      vReply.@replierId AS replyAuthorId,
      vReply.@replierFirstName AS replyAuthorFirstName,
      vReply.@replierLastName AS replyAuthorLastName,
      vReply.@knows AS replyAuthorKnowsOriginalMessageAuthor];
}

INSTALL QUERY is_7