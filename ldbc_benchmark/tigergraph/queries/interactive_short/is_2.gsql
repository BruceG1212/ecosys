CREATE QUERY is_2(VERTEX<Person> personId) FOR GRAPH ldbc_snb {
  SetAccum<VERTEX<Comment>> @@commentsRecent;
  SetAccum<VERTEX<Post>> @@postsRecent;
  SumAccum<INT> @messageId, @messageCreationDate, @authorOgId;
  SumAccum<STRING> @messageContent, @authorOgFN, @authorOgLN;

  BOOL isPost;

  vPerson = { personId };
  vMessage = 
    SELECT t
    FROM vPerson:s-((Comment_HAS_CREATOR_Person_REVERSE|Post_HAS_CREATOR_Person_REVERSE):e)->(Comment|Post):t
    ORDER BY t.creationDate DESC, t.id DESC
    LIMIT 10;

  vMessage = 
    SELECT v
    FROM vMessage:v
    ACCUM 
      CASE 
        WHEN v.type == "Comment" THEN 
          @@commentsRecent += v
        WHEN v.type == "Post" AND v.content != "" THEN 
          v.@messageId = v.id, 
          v.@messageContent = v.content,
          v.@messageCreationDate = datetime_to_epoch(v.creationDate),
          @@postsRecent += v
        WHEN v.type == "Post" THEN 
          v.@messageId = v.id, 
          v.@messageContent = v.imageFile,
          v.@messageCreationDate = datetime_to_epoch(v.creationDate),
          @@postsRecent += v
      END;

  FOREACH c IN @@commentsRecent DO
    vRoot(Comment|Post) = {c};
    isPost = False;
    WHILE isPost == False DO
      vRoot = 
        SELECT t
        FROM vRoot:s-((Comment_REPLY_OF_Comment|Comment_REPLY_OF_Post):e)->(Comment|Post):t
        ACCUM 
          t.@messageId = c.id,
          t.@messageContent = c.content,
          t.@messageCreationDate = datetime_to_epoch(c.creationDate),
          CASE WHEN t.type == "Post" THEN 
            isPost = True,
            @@postsRecent += t           
          END;
    END;
  END;

  vMessage = { @@postsRecent };
  vMessage = 
    SELECT s
    FROM vMessage:s-(Post_HAS_CREATOR_Person:e)->Person:t
    ACCUM 
      s.@authorOgId = t.id,
      s.@authorOgFN = t.firstName,
      s.@authorOgLN = t.lastName
    ORDER BY 
      s.@messageCreationDate DESC, 
      s.@messageId DESC;

  PRINT vMessage[
      vMessage.@messageId AS messageId,
      vMessage.@messageContent AS messageContent,
      epoch_to_datetime(vMessage.@messageCreationDate) AS messageCreationDate,
      vMessage.id AS originalPostId,
      vMessage.@authorOgId AS originalPostAuthorId,
      vMessage.@authorOgFN AS originalPostAuthorFirstName,
      vMessage.@authorOgLN AS originalPostAuthorLastName];
}
