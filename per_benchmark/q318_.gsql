use graph ldbc_snb

drop query q318_
CREATE QUERY q318_ () SYNTAX v1 {
/* __TF_HOP_BEGIN:0 */

// for source attribute installation
typedef tuple <uint id> gsqlpe_src_attrib_install_tup__1;

// for src id propagation
SetAccum<VERTEX> @srcIdOnlyPropagAcc_2, @srcIdOnlyPropagAcc_1;

// for installing source attributes
MapAccum<vertex, gsqlpe_src_attrib_install_tup__1> @@gsqlpe_src_attrib_install_map__1;

// while loop iteration counter
int i;

/* __TF_HOP_END:0 */
  MaxAccum<INT> @@oldest;
  //find how many post/comment liked by a person
  /* __TF_HOP_BEGIN:7 */
VS_s1 = { Person.* };

VS__1 =
        select p
        from   VS_s1:s -(LIKES:x)-> Post:p
        accum  p.@srcIdOnlyPropagAcc_1 += s
        post-accum
                      // install attributes needed in last hop
                      if s.type == "Person" then @@gsqlpe_src_attrib_install_map__1 += (s -> gsqlpe_src_attrib_install_tup__1(s.id)) end;

VS__2 =
        select f
        from   VS__1:p -(CONTAINER_OF_REVERSE:x_2)-> _:f
        accum  f.@srcIdOnlyPropagAcc_2 += p.@srcIdOnlyPropagAcc_1
        post-accum p.@srcIdOnlyPropagAcc_1.clear();
V =
        select t
        from   VS__2:f -(HAS_TAG:x_4)-> _:t
        accum  foreach s in f.@srcIdOnlyPropagAcc_2 do


                      // retrieve source attributes
                      uint s__id__gsqlpe__1 =  @@gsqlpe_src_attrib_install_map__1.get(s).id,
     @@oldest += s__id__gsqlpe__1

                end
        post-accum f.@srcIdOnlyPropagAcc_2.clear();

@@gsqlpe_src_attrib_install_map__1.clear();
/* __TF_HOP_END:10 */

  Print @@oldest;



}

//install query q311
//run query q5()
